{"version":3,"sources":["videos/Background Video.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","update","setState","height","window","innerHeight","width","innerWidth","state","menuExpand","page","addEventListener","this","navigation","onClick","header","className","autoPlay","muted","loop","src","backgroundVideo","type","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,8C,+MCwF5BC,E,kDAnFb,aAAe,IAAD,8BACZ,gBAgBFC,OAAS,WAAO,EAAKC,SAAS,CAACC,OAAQC,OAAOC,YAAaC,MAAOF,OAAOG,cAdvE,EAAKC,MAAQ,CACXL,OAAQ,EACRG,MAAO,EACPG,YAAY,EACZC,KAAM,QAGRN,OAAOO,iBAAiB,SAAU,EAAKV,QAV3B,E,gEAcZW,KAAKX,W,+BAKG,IAAD,OACHY,EAAa,4BAAQC,QAAS,kBAAM,EAAKZ,SAAS,CAACO,YAAa,EAAKD,MAAMC,eAA9D,UAGbG,KAAKJ,MAAMF,MAAQ,MACrBO,EACA,6BACE,4BACE,4BAAI,4BAAQC,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,YAA5C,UACJ,4BAAI,4BAAQI,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,gBAA5C,cACJ,4BAAI,4BAAQI,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,WAA5C,SACJ,4BAAI,4BAAQI,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,cAA5C,eAKV,IAAIK,EACJ,gCACE,yBAAKC,UAAU,qBACb,8BACA,6CACCH,IA8BL,OAzBID,KAAKJ,MAAMF,MAAQ,MACrBS,EACA,4BAAQC,UAAU,mBAChB,6CACCH,IAIDD,KAAKJ,MAAMF,MAAQ,KAAOM,KAAKJ,MAAMC,aACvCM,EACA,gCACE,yBAAKC,UAAU,qBACb,8BACA,6CACCH,GAEH,wBAAIG,UAAU,wBACZ,4BAAI,4BAAQF,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,YAA5C,UACJ,4BAAI,4BAAQI,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,gBAA5C,cACJ,4BAAI,4BAAQI,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,WAA5C,SACJ,4BAAI,4BAAQI,QAAS,kBAAM,EAAKZ,SAAS,CAACQ,KAAM,cAA5C,aAVR,MAgBA,6BACE,yBAAKM,UAAU,iBACb,2BAAOC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACH,UAAU,uBACnC,4BAAQI,IAAKC,IAAiBC,KAAK,gBAGtCP,O,GA9ESQ,IAAMC,WCQJC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.262edbef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Background Video.225974e3.mp4\";","import React from 'react';\nimport './App.css';\nimport backgroundVideo from './videos/Background Video.mp4';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      height: 0,\n      width: 0,\n      menuExpand: false,\n      page: \"Home\"\n    };\n\n    window.addEventListener(\"resize\", this.update);\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  update = () => {this.setState({height: window.innerHeight, width: window.innerWidth});};\n\n  render() {\n    let navigation = <button onClick={() => this.setState({menuExpand: !this.state.menuExpand})}>&#8801;</button>;\n\n    // if screen width is large, use horizontal navigation instead of button\n    if (this.state.width > 700){\n      navigation =\n      <nav>\n        <ul>\n          <li><button onClick={() => this.setState({page: \"About\"})}>About</button></li>\n          <li><button onClick={() => this.setState({page: \"Portfolio\"})}>Portfolio</button></li>\n          <li><button onClick={() => this.setState({page: \"Blog\"})}>Blog</button></li>\n          <li><button onClick={() => this.setState({page: \"Contact\"})}>Contact</button></li>\n        </ul>\n      </nav>;\n    }\n\n    let header =\n    <header>\n      <div className=\"header_withButton\">\n        <div></div>\n        <h1>Spring Nguyen</h1>\n        {navigation}\n      </div>\n    </header>;\n\n    // if screen width is large, use different css\n    if (this.state.width > 700){\n      header =\n      <header className=\"header_noButton\">\n        <h1>Spring Nguyen</h1>\n        {navigation}\n      </header>;\n    }\n\n    if (this.state.width < 700 && this.state.menuExpand){\n      header =\n      <header>\n        <div className=\"header_withButton\">\n          <div></div>\n          <h1>Spring Nguyen</h1>\n          {navigation}\n        </div>\n        <ul className=\"ul_withButtonPressed\">\n          <li><button onClick={() => this.setState({page: \"About\"})}>About</button></li>\n          <li><button onClick={() => this.setState({page: \"Portfolio\"})}>Portfolio</button></li>\n          <li><button onClick={() => this.setState({page: \"Blog\"})}>Blog</button></li>\n          <li><button onClick={() => this.setState({page: \"Contact\"})}>Contact</button></li>\n        </ul>;\n      </header>;\n    }\n\n    return (\n      <div>\n        <div className=\"fullscreen-bg\">\n          <video autoPlay muted loop className=\"fullscreen-bg_video\">\n            <source src={backgroundVideo} type=\"video/mp4\"></source>\n          </video>\n        </div>\n        {header}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}