{"version":3,"sources":["smicons/file.png","smicons/twitter.png","smicons/linkedin.png","Resume.pdf","previewVideos/water.mp4","previewVideos/pikachu.mp4","previewVideos/voidblock.mp4","previewVideos/arrowshot.mp4","images/arrowshotbow.png","previews.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","previews","id","vidsrc","pikachuvid","title","link","watervid","voidblockvid","arrowshotvid","App","update","setState","height","window","innerHeight","width","innerWidth","state","menuExpand","page","addEventListener","this","header","className","href","resume","src","file","twitter","linkedin","console","log","image","sampleGrid","map","class","loop","muted","onMouseOver","event","target","play","onMouseOut","pause","currentTime","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,oUCY5BC,EAPE,CACf,CAAEC,GAAI,EAAGC,OAAQC,IAAYC,MAAO,UAAWC,KAAM,gBACrD,CAAEJ,GAAI,EAAGC,OAAQI,IAAUF,MAAO,QAASC,KAAM,cACjD,CAAEJ,GAAI,EAAGC,OAAQK,IAAcH,MAAO,aAAcC,KAAM,kBAC1D,CAAEJ,GAAI,EAAGC,OAAQM,IAAcJ,MAAO,aAAcC,KAAM,mB,iBCyE7CI,E,kDAvEb,aAAe,IAAD,8BACZ,gBAgBFC,OAAS,WAAO,EAAKC,SAAS,CAACC,OAAQC,OAAOC,YAAaC,MAAOF,OAAOG,cAdvE,EAAKC,MAAQ,CACXL,OAAQ,EACRG,MAAO,EACPG,YAAY,EACZC,KAAM,QAGRN,OAAOO,iBAAiB,SAAU,EAAKV,QAV3B,E,gEAcZW,KAAKX,W,+BAML,IAAIY,EACJ,4BAAQC,UAAU,eAChB,6CACA,yBAAKA,UAAU,oBACb,uBAAGC,KAAMC,IAAQrB,MAAM,UAAS,yBAAKsB,IAAKC,OAC1C,uBAAGH,KAAK,qCAAoC,yBAAKE,IAAKE,OACtD,uBAAGJ,KAAK,wCAAuC,yBAAKE,IAAKG,SAKzDR,KAAKJ,MAAMF,MAAQ,MACrBO,EACA,4BAAQC,UAAU,iBAChB,6CACA,yBAAKA,UAAU,sBACb,uBAAGC,KAAMC,KAAQ,yBAAKC,IAAKC,OAC3B,uBAAGH,KAAK,qCAAoC,yBAAKE,IAAKE,OACtD,uBAAGJ,KAAK,wCAAuC,yBAAKE,IAAKG,UAK/DC,QAAQC,IAAIC,KAEZ,IAAIC,EACJ,yBAAKV,UAAU,wBACZvB,EAASkC,KAAI,cAAEjC,GAAF,IAAMC,EAAN,EAAMA,OAAeG,GAArB,EAAcD,MAAd,EAAqBC,MAArB,OACZ,yBAAK8B,MAAM,eAAc,uBAAGX,KAAMnB,GAAM,2BAAO+B,MAAI,EAACC,OAAK,EAACC,YAAa,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,QAAQC,WAAY,SAAAH,GAAUA,EAAMC,OAAOG,QAASJ,EAAMC,OAAOI,YAAc,GAAKlB,IAAKxB,UAc1L,OAVImB,KAAKJ,MAAMF,MAAQ,MACrBkB,EACA,yBAAKV,UAAU,0BACZvB,EAASkC,KAAI,cAAEjC,GAAF,IAAMC,EAAN,EAAMA,OAAeG,GAArB,EAAcD,MAAd,EAAqBC,MAArB,OACZ,yBAAK8B,MAAM,iBAAgB,uBAAGX,KAAMnB,GAAM,2BAAO+B,MAAI,EAACC,OAAK,EAACC,YAAa,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,QAAQC,WAAY,SAAAH,GAAUA,EAAMC,OAAOG,QAASJ,EAAMC,OAAOI,YAAc,GAAKlB,IAAKxB,WAO5L,6BACGoB,EACAW,O,GAlESY,IAAMC,WCEJC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.df2bea3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/file.35771910.png\";","module.exports = __webpack_public_path__ + \"static/media/twitter.e18ebba4.png\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.cbf63eb3.png\";","module.exports = __webpack_public_path__ + \"static/media/Resume.33bf935b.pdf\";","module.exports = __webpack_public_path__ + \"static/media/water.0675d659.mp4\";","module.exports = __webpack_public_path__ + \"static/media/pikachu.ffea52a0.mp4\";","module.exports = __webpack_public_path__ + \"static/media/voidblock.3956c502.mp4\";","module.exports = __webpack_public_path__ + \"static/media/arrowshot.878fbd3a.mp4\";","module.exports = __webpack_public_path__ + \"static/media/arrowshotbow.f3d93392.png\";","import watervid from './previewVideos/water.mp4';\r\nimport pikachuvid from './previewVideos/pikachu.mp4';\r\nimport voidblockvid from './previewVideos/voidblock.mp4';\r\nimport arrowshotvid from './previewVideos/arrowshot.mp4';\r\n\r\nconst previews = [\r\n  { id: 1, vidsrc: pikachuvid, title: 'Pikachu', link: 'pikachu.html' },\r\n  { id: 2, vidsrc: watervid, title: 'Water', link: 'water.html' },\r\n  { id: 3, vidsrc: voidblockvid, title: 'Void Block', link: 'voidblock.html' },\r\n  { id: 4, vidsrc: arrowshotvid, title: 'Arrow Shot', link: 'arrowshot.html' }\r\n];\r\n\r\nexport default previews;\r\n","import React from 'react';\nimport './App.css';\nimport file from './smicons/file.png';\nimport twitter from './smicons/twitter.png';\nimport linkedin from './smicons/linkedin.png';\nimport resume from './Resume.pdf';\nimport previews from './previews';\n\nimport image from './images/arrowshotbow.png';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      height: 0,\n      width: 0,\n      menuExpand: false,\n      page: \"Home\"\n    };\n\n    window.addEventListener(\"resize\", this.update);\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  update = () => {this.setState({height: window.innerHeight, width: window.innerWidth});};\n\n  render() {\n    let header =\n    <header className=\"header_wide\">\n      <h1>Spring Nguyen</h1>\n      <div className=\"contactInfo_wide\">\n        <a href={resume} title=\"Resume\"><img src={file}></img></a>\n        <a href=\"https://twitter.com/realmandarker\"><img src={twitter}></img></a>\n        <a href=\"https://www.linkedin.com/in/springn/\"><img src={linkedin}></img></a>\n      </div>\n    </header>;\n\n    // if screen width is small, use different css\n    if (this.state.width < 700){\n      header =\n      <header className=\"header_narrow\">\n        <h1>Spring Nguyen</h1>\n        <div className=\"contactInfo_narrow\">\n          <a href={resume}><img src={file}></img></a>\n          <a href=\"https://twitter.com/realmandarker\"><img src={twitter}></img></a>\n          <a href=\"https://www.linkedin.com/in/springn/\"><img src={linkedin}></img></a>\n        </div>\n      </header>;\n    }\n\n    console.log(image);\n\n    let sampleGrid =\n    <div className=\"sampleContainer_wide\">\n      {previews.map(({id, vidsrc, title, link}) =>\n        <div class=\"sample_wide\"><a href={link}><video loop muted onMouseOver={event => event.target.play()} onMouseOut={event => {event.target.pause(); event.target.currentTime = 0;}} src={vidsrc}></video></a></div>)\n      }\n    </div>;\n\n    if (this.state.width < 700){\n      sampleGrid =\n      <div className=\"sampleContainer_narrow\">\n        {previews.map(({id, vidsrc, title, link}) =>\n          <div class=\"sample_narrow\"><a href={link}><video loop muted onMouseOver={event => event.target.play()} onMouseOut={event => {event.target.pause(); event.target.currentTime = 0;}} src={vidsrc}></video></a></div>)\n        }\n      </div>;\n    }\n\n\n    return (\n      <div>\n        {header}\n        {sampleGrid}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}